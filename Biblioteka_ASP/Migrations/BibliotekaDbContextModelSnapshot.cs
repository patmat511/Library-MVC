// <auto-generated />
using System;
using Biblioteka_ASP.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Biblioteka_ASP.Migrations
{
    [DbContext(typeof(BibliotekaDbContext))]
    partial class BibliotekaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Biblioteka_ASP.Models.Gatunki", b =>
                {
                    b.Property<int>("ID_Gatunku")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Gatunku"));

                    b.Property<string>("Gatunek")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID_Gatunku");

                    b.ToTable("Gatunki");
                });

            modelBuilder.Entity("Biblioteka_ASP.Models.Klienci", b =>
                {
                    b.Property<int>("ID_Klienta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Klienta"));

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("ID_Klienta");

                    b.ToTable("Klienci");
                });

            modelBuilder.Entity("Biblioteka_ASP.Models.Ksiazki", b =>
                {
                    b.Property<int>("ID_Ksiazki")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Ksiazki"));

                    b.Property<string>("Autor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ID_Gatunku")
                        .HasColumnType("int");

                    b.Property<int>("Ilosc_Dostepna")
                        .HasColumnType("int");

                    b.Property<int>("Rok_Wydania")
                        .HasColumnType("int");

                    b.Property<string>("Tytul")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.HasKey("ID_Ksiazki");

                    b.HasIndex("ID_Gatunku");

                    b.ToTable("Ksiazki");
                });

            modelBuilder.Entity("Biblioteka_ASP.Models.Wypozyczenia", b =>
                {
                    b.Property<int>("ID_Wypozyczenia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Wypozyczenia"));

                    b.Property<DateTime>("Data_Wypozyczenia")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Data_Zwrotu")
                        .HasColumnType("datetime2");

                    b.Property<int>("ID_Klienta")
                        .HasColumnType("int");

                    b.Property<int>("ID_Ksiazki")
                        .HasColumnType("int");

                    b.Property<int>("Kara")
                        .HasColumnType("int");

                    b.HasKey("ID_Wypozyczenia");

                    b.HasIndex("ID_Klienta");

                    b.HasIndex("ID_Ksiazki");

                    b.ToTable("Wypozyczenia");
                });

            modelBuilder.Entity("Biblioteka_ASP.Models.Ksiazki", b =>
                {
                    b.HasOne("Biblioteka_ASP.Models.Gatunki", "Gatunki")
                        .WithMany("Ksiazki")
                        .HasForeignKey("ID_Gatunku")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gatunki");
                });

            modelBuilder.Entity("Biblioteka_ASP.Models.Wypozyczenia", b =>
                {
                    b.HasOne("Biblioteka_ASP.Models.Klienci", "Klienci")
                        .WithMany("Wypozyczenia")
                        .HasForeignKey("ID_Klienta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Biblioteka_ASP.Models.Ksiazki", "Ksiazki")
                        .WithMany("Wypozyczenia")
                        .HasForeignKey("ID_Ksiazki")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Klienci");

                    b.Navigation("Ksiazki");
                });

            modelBuilder.Entity("Biblioteka_ASP.Models.Gatunki", b =>
                {
                    b.Navigation("Ksiazki");
                });

            modelBuilder.Entity("Biblioteka_ASP.Models.Klienci", b =>
                {
                    b.Navigation("Wypozyczenia");
                });

            modelBuilder.Entity("Biblioteka_ASP.Models.Ksiazki", b =>
                {
                    b.Navigation("Wypozyczenia");
                });
#pragma warning restore 612, 618
        }
    }
}
